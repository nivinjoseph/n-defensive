{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;AAAA,iBAAe;AACf,2CAKqB;AASrB,eAAyB,GAAM,EAAE,OAAe;IAE5C,EAAE,CAAC,CAAC,OAAO,IAAI,IAAI,IAAI,OAAO,CAAC,mBAAmB,EAAE,CAAC;QACjD,MAAM,IAAI,mCAAqB,CAAC,SAAS,CAAC,CAAC;IAE/C,MAAM,CAAC,IAAI,eAAe,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AAC7C,CAAC;AAND,sBAMC;AAED;IAMI,yBAAY,GAAM,EAAE,OAAe;QAE/B,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QAChB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC5B,CAAC;IAEM,wCAAc,GAArB;QAEI,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,CAAC;YAC7C,MAAM,IAAI,mCAAqB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAEnD,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAIM,gCAAM,GAAb,UAAc,IAAyB,EAAE,MAAe;QAEpD,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC;YACb,MAAM,IAAI,mCAAqB,CAAC,MAAM,CAAC,CAAC;QAE5C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CACrB,CAAC;YACG,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,mBAAmB,EAAE,CAAC;gBAChD,MAAM,IAAI,+BAAiB,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;YAE9D,MAAM,IAAI,sCAAwB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACtD,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IACL,sBAAC;AAAD,CAAC,AArCD,IAqCC","sourcesContent":["import \"n-ext\";\nimport  \n{\n    ArgumentException,\n    ArgumentNullException,\n    InvalidArgumentException,\n} from \"n-exception\";\n\nexport interface Ensurer<T>\n{\n    ensureHasValue(): Ensurer<T>;\n    ensure(func: (arg: T) => boolean): Ensurer<T>;\n    ensure(func: (arg: T) => boolean, reason: string): Ensurer<T>;\n}  \n\nexport function given<T>(arg: T, argName: string): Ensurer<T>\n{\n    if (argName == null || argName.isEmptyOrWhiteSpace())\n        throw new ArgumentNullException(\"argName\");\n    \n    return new EnsurerInternal(arg, argName);\n}\n\nclass EnsurerInternal<T> implements Ensurer<T>\n{\n    private _arg: T;\n    private _argName: string;\n\n\n    constructor(arg: T, argName: string)\n    {\n        this._arg = arg;\n        this._argName = argName;\n    }\n\n    public ensureHasValue(): Ensurer<T>\n    {\n        if (this._arg == null || this._arg === undefined)\n            throw new ArgumentNullException(this._argName);\n\n        return this;\n    }\n\n    public ensure(func: (arg: T) => boolean): Ensurer<T>;   \n    public ensure(func: (arg: T) => boolean, reason: string): Ensurer<T>;\n    public ensure(func: (arg: T) => boolean, reason?: string): Ensurer<T>\n    {\n        if (func == null)\n            throw new ArgumentNullException(\"func\");    \n        \n        if (!func(this._arg))\n        {\n            if (reason != null && !reason.isEmptyOrWhiteSpace())\n                throw new ArgumentException(this._argName, reason.trim());\n\n            throw new InvalidArgumentException(this._argName);\n        }\n\n        return this;\n    }\n}"]}